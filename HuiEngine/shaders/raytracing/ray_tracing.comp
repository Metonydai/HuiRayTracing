#version 450
#extension GL_GOOGLE_include_directive: enable

#include "Ray.comph"
#include "Hittable.comph"

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(push_constant) uniform PushConstants {
    ivec2 screenSize;
    uint hittableCount;
    uint maxDepth;
} push;


layout (set = 0, binding = 0) uniform ParameterUBO {
    vec2 u_resolution;
    float deltaTime;
    float gravity;
} ubo;

layout (set = 0, binding = 1, rgba8) uniform writeonly image2D outputImage;

layout (set = 0, binding = 2, std430) readonly buffer HittableBuffer
{
    Hittable hittables[];
};

Interface
void Deref(out Hittable hittable, Pointer ptr) { hittable = hittables[ptr]; }

layout(set = 0, binding = 3, std430) readonly buffer HittableDumpBuffer
{
    vec4 data[];
} hittableData;

Interface
void Deref(Hittable hittable, out vec4 data, Pointer ptr) { data = hittableData.data[ptr]; }

vec3 RayColor(const in Ray ray) 
{
    HitRecord rec;
    if (HitAny(push.hittableCount, ray, 0.0, 100000.0, rec))
    {
        return 0.5 * (rec.normal + vec3(1.0f));
    }

    vec3 unit_direction = normalize(ray.direction);
    float a = 0.5 * (unit_direction.y + 1.0);
    return (1.0 - a) * vec3(1.0, 1.0, 1.0) + a * vec3(0.5, 0.7, 1.0);
}

void main() 
{
	ivec2 dim = imageSize(outputImage);
	//vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

    float aspect_ratio = ubo.u_resolution.x / ubo.u_resolution.y;
    
    int image_width = dim.x;
    int image_height = dim.y;

    float focal_length = 1.0;
    float viewport_height = 2.0;
    float viewport_width = viewport_height * aspect_ratio;

    vec3 camera_center = vec3(0);

    // Calculate the vectors across the horizontal and down the vertical viewport edges.
    vec3 viewport_u = vec3(viewport_width, 0, 0);
    vec3 viewport_v = vec3(0, viewport_height, 0);

    // Calculate the horizontal and vertical delta vectors from pixel to pixel.
    vec3 pixel_delta_u = viewport_u / image_width;
    vec3 pixel_delta_v = viewport_v / image_height;

    // Calculate the location of the lower left pixel.
    vec3 viewport_lower_left = vec3(0, 0, -focal_length)
                             - camera_center - viewport_u/2 - viewport_v/2;
    vec3 pixel00_loc = viewport_lower_left + 0.5 * (pixel_delta_u + pixel_delta_v);

    vec3 pixel_center = pixel00_loc + (gl_GlobalInvocationID.x * pixel_delta_u) + (gl_GlobalInvocationID.y * pixel_delta_v);
    vec3 ray_direction = pixel_center - camera_center;
    Ray r;
    Init(r, camera_center, ray_direction);

    vec3 finalColor = RayColor(r);

	imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 1.0));
}


